#ifndef _EVENT_NOTIFICATION_H_
#define _EVENT_NOTIFICATION_H_

#include "audio_service.h"
#include "platform.h"

#define ROBOT_EVENT_NOTIFICATION_DEBUG_ENABLE      (0)

#define ROBOT_EVENT_IO_NOTIFICATION                (MICO_AUDIO_AIROBOT_IO_NOTIFY)

#define ROBOT_EVENT_CHECK_CYCLE                    (0xFFFFFFFF)
#define ROBOT_EVENT_CONTENT_MAX_LEN                (512)

#define ROBOT_EVENT_NOTIFICATION_SEM_NUM           (1)

#define ROBOT_KEY_MAX_NUM                          (12)
#define ROBOT_EVENT_QUEUE_MEMBER_NUM               (3)

#define ROBOT_KEY_CLICK_TIMER_MAX_TIME             (700)    //700ms
#define ROBOT_KEY_LONG_PRESS_TIMER_MAX_TIME1       (3000)   //3000ms
#define ROBOT_KEY_LONG_PRESS_TIMER_MAX_TIME2       (30000 - ROBOT_KEY_LONG_PRESS_TIMER_MAX_TIME1)  //30000ms

#define ROBOT_EVENT_PLAYING_FILE_NAME_MAX_LEN      (256)
#define ROBOT_EVENT_DOWNLOAD_FILE_NAME_MAX_LEN     (256)

typedef enum
{
    ROBOT_NOTIFICATION_EVENT_KEY = 0x00,
    ROBOT_NOTIFICATION_EVENT_BATTERY,
    ROBOT_NOTIFICATION_EVENT_USB,
    ROBOT_NOTIFICATION_EVENT_SD_CARD,
    ROBOT_NOTIFICATION_EVENT_FILE_DOWNLOAD,
    ROBOT_NOTIFICATION_EVENT_QC_MODE,
    ROBOT_NOTIFICATION_EVENT_PLAYING_FILENAME,
    ROBOT_NOTIFICATION_EVENT_NO_EVENT,
    ROBOT_NOTIFICATION_EVENT_MAX,
    ROBOT_NOTIFICATION_EVENT_NONE
} ROBOT_EVENT_NOTIFICATION_TYPE_E;

typedef enum {
  ROBOT_NOTIFICATION_KEY_INDEX1 = 0x01,
  ROBOT_NOTIFICATION_KEY_INDEX2,
  ROBOT_NOTIFICATION_KEY_INDEX3,
  ROBOT_NOTIFICATION_KEY_INDEX4,
  ROBOT_NOTIFICATION_KEY_INDEX5,
  ROBOT_NOTIFICATION_KEY_INDEX6,
  ROBOT_NOTIFICATION_KEY_INDEX7,
  ROBOT_NOTIFICATION_KEY_INDEX8,
  ROBOT_NOTIFICATION_KEY_INDEX9,
  ROBOT_NOTIFICATION_KEY_MAX,
  ROBOT_NOTIFICATION_KEY_NONE
} ROBOT_NOTIFICATION_KEY_INDEX_E;

typedef enum {
  ROBOT_NOTIFICATION_KEY_EVNET_PRESS_START,
  ROBOT_NOTIFICATION_KEY_EVNET_PRESS_STOP,
  ROBOT_NOTIFICATION_KEY_EVNET_MAX,
  ROBOT_NOTIFICATION_KEY_EVNET_NONE
} ROBOT_NOTIFICATION_KEY_EVENT_E;

typedef enum {
  ROBOT_NOTIFICATION_USB_EVNET_NOT_INSERTED,
  ROBOT_NOTIFICATION_USB_EVNET_CHARGE_ONLY,
  ROBOT_NOTIFICATION_USB_EVNET_U_DISK,
  ROBOT_NOTIFICATION_USB_EVNET_MAX,
  ROBOT_NOTIFICATION_USB_EVNET_NONE
} ROBOT_NOTIFICATION_USB_EVNET_E;

typedef enum {
  ROBOT_NOTIFICATION_SD_EVNET_NOT_INSERTED,
  ROBOT_NOTIFICATION_SD_EVNET_INSERTED,
  ROBOT_NOTIFICATION_SD_EVNET_MAX,
  ROBOT_NOTIFICATION_SD_EVNET_NONE
} ROBOT_NOTIFICATION_SD_EVNET_E;

typedef enum {
  ROBOT_NOTIFICATION_FILE_DOWNLOAD_EVNET_CHECK_SUCCESS,
  ROBOT_NOTIFICATION_FILE_DOWNLOAD_EVNET_CHECK_FAILED,
  ROBOT_NOTIFICATION_FILE_DOWNLOAD_EVNET_MAX,
  ROBOT_NOTIFICATION_FILE_DOWNLOAD_NONE
} ROBOT_NOTIFICATION_FILE_DOWNLOAD_EVNET_E;

typedef enum {
  ROBOT_NOTIFICATION_QC_EVNET_ENTER,
  ROBOT_NOTIFICATION_QC_EVNET_QUIT,
  ROBOT_NOTIFICATION_QC_EVNET_MAX,
  ROBOT_NOTIFICATION_QC_EVNET_NONE
} ROBOT_NOTIFICATION_QC_EVNET_E;

typedef enum {
  ROBOT_KEY_EVENT_USER_CLICK, //t < ROBOT_KEY_CLICK_TIMER_MAX_TIME
  ROBOT_KEY_EVENT_USER_PRESS, //t = ROBOT_KEY_CLICK_TIMER_MAX_TIME
  ROBOT_KEY_EVENT_USER_RELEASE_IN_TIMER1, //ROBOT_KEY_EVENT_USER_PRESS < t < ROBOT_KEY_EVENT_USER_TIMER1
  ROBOT_KEY_EVENT_USER_TIMER1, //t = ROBOT_KEY_EVENT_USER_TIMER1
  ROBOT_KEY_EVENT_USER_RELEASE_IN_TIMER2, //ROBOT_KEY_EVENT_USER_TIMER1 < t < ROBOT_KEY_EVENT_USER_TIMER2
  ROBOT_KEY_EVENT_USER_TIMER2, //t = ROBOT_KEY_EVENT_USER_TIMER2
  ROBOT_KEY_EVENT_USER_RELEASE_OUT_TIMER2, //t > ROBOT_KEY_EVENT_USER_TIMER2
  ROBOT_KEY_EVENT_USER_MAX,
  ROBOT_KEY_EVENT_USER_NONE
} ROBOT_KEY_EVENT_USER_E;

typedef struct _ROBOT_EVENT_NOTIFICATION_S{
    ROBOT_EVENT_NOTIFICATION_TYPE_E event_type;
    uint8_t *event_data;
} ROBOT_EVENT_NOTIFICATION_S;

typedef struct _ROBOT_KEY_STATE_TIMER_S{
    ROBOT_NOTIFICATION_KEY_INDEX_E key_index;
    ROBOT_NOTIFICATION_KEY_EVENT_E state;
    uint32_t press_time;
    uint32_t release_time;
    mico_timer_t key_timer;
} ROBOT_KEY_STATE_TIMER_S;

typedef struct _ROBOT_KEY_STATE_ARRAY_S{
    ROBOT_KEY_STATE_TIMER_S key_array[ROBOT_KEY_MAX_NUM];
} ROBOT_KEY_STATE_TIMER_ARRAY_S;

typedef struct _ROBOT_EVENT_KEY_DATA_S{
    ROBOT_NOTIFICATION_KEY_INDEX_E key_index;
    ROBOT_KEY_EVENT_USER_E user_key_event;
}ROBOT_EVENT_KEY_DATA_S;

typedef struct _ROBOT_EVENT_FILE_DOWNLOAD_S{
    audio_sys_file_download_type_e file_type;
    ROBOT_NOTIFICATION_FILE_DOWNLOAD_EVNET_E download_state;
    uint8_t file_name_len;
    uint8_t file_name[ROBOT_EVENT_DOWNLOAD_FILE_NAME_MAX_LEN];
}ROBOT_EVENT_FILE_DOWNLOAD_S;

typedef struct _ROBOT_EVENT_PLAYING_FILE_NAME_S{
    uint8_t file_name_len;
    uint8_t file_name[ROBOT_EVENT_PLAYING_FILE_NAME_MAX_LEN];
}ROBOT_EVENT_PLAYING_FILE_NAME_S;

typedef union _ROBOT_EVENT_DATA_U{
    ROBOT_EVENT_KEY_DATA_S            robot_event_key_data;
    uint8_t                           battery_level;
    ROBOT_NOTIFICATION_USB_EVNET_E    usb_state;
    ROBOT_NOTIFICATION_SD_EVNET_E     sd_state;
    ROBOT_EVENT_FILE_DOWNLOAD_S       robot_event_file_download;
    ROBOT_NOTIFICATION_QC_EVNET_E     qc_state;
    ROBOT_EVENT_PLAYING_FILE_NAME_S   robot_event_playing_file_name;
} ROBOT_EVENT_DATA_U;

typedef struct _ROBOT_EVENT_QUEUE_MEMBER{
    ROBOT_EVENT_NOTIFICATION_TYPE_E event_type;
    ROBOT_EVENT_DATA_U event_data;
} ROBOT_EVENT_QUEUE_MEMBER;

OSStatus robot_event_notification_service_start( void );

OSStatus robot_event_notification_queue_pop(ROBOT_EVENT_QUEUE_MEMBER *robot_event_p, uint32_t wait_time_ms);


#endif
